/*=========CPU========= */
#include "./computerstate.h"
/* 获取cpu的total */
/* 分离出数字 */
int numcapture(char *str, int *cpunum, int size)
{
	int *num = cpunum;
	int sum, flag, i;

	flag = 0;
	sum = 0;
	i = 0;

	while (1)
	{
		if (*str>='0' && *str<='9')
		{
			sum = sum * 10 + (*str - '0');
			str++;
			flag = 1;
		}
		else if (*str >= 'A' && *str <= 'z')
		{
			str++;
			flag = 2;
		}
		else
		{
			if (flag == 1)
			{
				*num = sum;
				sum = 0;
				num += 1;
				flag = 0;
				i++;
			}
			str++;
		}
		if (i >= size)
		{
			return 0;
		}
	}
}

double get_cpuuse () 
{   
	FILE *fp;         
	char *line = NULL;
	size_t len = 0;
	ssize_t read;
	int num = 0;            
	int i=0;
	int msg[7] = {};
	long int total = 0;
	double cpu;
	CPU_OCCUPY cpust;

	fp = fopen ("/proc/stat", "r"); 
	if(fp<0)
	{
		perror("fopen");
		exit(-1);
	}

	read = getline (&line,&len,fp);
	fclose (fp);
	DEBUG ("line=%s,len=%d\n", line, len);
	
#if 1

	int res = numcapture(line, msg, 7);
#endif

#if 1
	cpust.user = msg[0];
	cpust.nice = msg[1];
	cpust.system = msg[2];
	cpust.idle = msg[3];
	cpust.iowait = msg[4];
	cpust.irq = msg[5];
	cpust.softirq = msg[6];
#endif
#if 0
cpu  user=26057 nice=30 system=19540 idle=11578094 6835 108 1405 
	105627
	11683721
#endif
	cpu = 100*(cpust.user + cpust.nice + cpust.system) / (cpust.user + cpust.nice + cpust.system + cpust.idle);
	return cpu;
}


